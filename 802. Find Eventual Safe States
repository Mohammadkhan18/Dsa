class Solution {
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int n= graph.size();
        vector<int> vi(n,0);
         vector<int> di(n,0);
         vector<int> adj[n];
         for(int i =0; i<n;i++){
             for(auto &x: graph[i]){
                 adj[x].push_back(i);
                 di[i]++;
             }
         }
         queue<int> q;
         for(int i =0; i<n;i++){
             if(di[i] == 0) q.push(i);
         }
         vector<int> ans;
         while(!q.empty()){
             int node = q.front();
             ans.push_back(node);
             q.pop();
             for(auto x: adj[node]){
                 di[x]--;
                 if(di[x]== 0) q.push(x);
             }
         }
         sort(ans.begin(),ans.end());
         return ans;
    }
};
