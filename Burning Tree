class Solution {
  public:
  
  Node* f(Node* root, int target)
    {
        queue<Node*> q;
        q.push(root);
        while(q.size())
        {
            Node* node=q.front();
            q.pop();
            if(node->data==target)
            return node;
            if(node->left)
            q.push(node->left);
            if(node->right)
            q.push(node->right);
        }
        return root;
    }
    void mark(Node* root, unordered_map<Node*,Node*> &parents)
    {
        queue<Node*> q;
        q.push(root);
        while(q.size())
        {
            auto node=q.front();
            q.pop();
            if(node->left)
            {
                parents[node->left]=node;
                q.push(node->left);
            }
            if(node->right)
            {
                parents[node->right]=node;
                q.push(node->right);
            }
        }
        return;
    }
    int minTime(Node* root, int target) 
    {
        Node* targett=f(root,target);
        unordered_map<Node*,Node*> parents;
        mark(root,parents);
        
       unordered_map<Node*,bool> vis;
       queue<Node*> q;
       q.push(targett);
       vis[targett]=1;
       int ans=0;
       while(!q.empty())
       {
           int n=q.size();
           ans++;
           for(int i=0; i<n; i++)
           {
               auto node=q.front();
               q.pop();
               if(node->left && !vis[node->left])
               {
                   q.push(node->left);
                   vis[node->left]=1;
               }
               if(node->right && !vis[node->right])
               {
                   q.push(node->right);
                   vis[node->right]=1;
               }
               if(parents[node] && !vis[parents[node]])
               {
                   q.push(parents[node]);
                   vis[parents[node]]=1;
               }
           }
       }
       return ans-1;
    }
};
